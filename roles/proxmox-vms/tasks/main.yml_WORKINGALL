---
- name: Gather list of VMs
  shell: pvesh get /cluster/resources -type vm --output-format yaml
  register: __vm_list

- name: d
  debug:
    msg: "{{ __vm_list.stdout | from_yaml }}"

- name: record templates
  set_fact:
    vm_templates: "{{ (__vm_list.stdout | from_yaml) | selectattr('template', 'equalto', 1) | list }}"

- name: d
  debug:
    var: vm_templates

- name: Create VMs
  proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_password: "{{ proxmox_password }}"
    api_host: "{{ groups['proxmox_host'][0] }}"
    node: "{{ groups['proxmox_host'][0] }}"
    name: "{{ item.key }}"
    cores: "{{ item.value.cpu_count | default(cpu_count) }}"
    memory: "{{ item.value.memory_mb | default(memory_mb) }}"
    net: '{"net0":"virtio,bridge={{ item.value.proxmox_network | default(proxmox_network) }}"}'
    clone: "{{ item.value.template }}"
    vmid: "{{ (vm_templates | selectattr('name', 'equalto', item.value.template) | list).0.vmid }}"
    newid: "{{ proxmox_vm_starting_vmid + index }}"
    storage: "{{ item.value.storage | default(proxmox_storage) }}"
    scsi: "{{ item.value.disks }}"
    scsihw: virtio-scsi-pci
    agent: yes
    timeout: 500
  loop: "{{ vm_scenarios[vm_scenario] | dict2items }}"
  loop_control:
    index_var: index

#- name: testing loop
#  debug:
#    msg: "{% for disk in item.value.disks %}pvesh create /nodes/{{ groups['proxmox_host'][0] }}/qemu/{{ proxmox_vm_starting_vmid + index }}/config -scsi{{ loop.index }} {{ item.value.storage | default(proxmox_storage) }}:{{ disk }}\n{% endfor %}"
#    #var: item
#  loop: "{{ vm_scenarios[vm_scenario] | dict2items }}"
#  loop_control:
#    index_var: index
#


#  cat /etc/pve/qemu-server/600.conf  | grep ^scsi[0-9]
# pvesh get /nodes/proxmox1/qemu/600/config --output-format yaml # check for scsiX lines
# TODO: need to check if disks exist already somehow

- name: Create additional VM disks
  shell: "{% for disk in item.value.disks | dict2items %}pvesh create /nodes/{{ groups['proxmox_host'][0] }}/qemu/{{ proxmox_vm_starting_vmid + index }}/config -{{ disk.key }} {{ proxmox_storage }}:{{ disk.value }}\n{% endfor %}"
  loop: "{{ vm_scenarios[vm_scenario] | dict2items }}"
  loop_control:
    index_var: index

- name: wait before starting VMs
  pause:

- name: Start VM
  proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_password: "{{ proxmox_password }}"
    api_host: "{{ groups['proxmox_host'][0] }}"
    node: "{{ groups['proxmox_host'][0] }}"
    vmid: "{{ proxmox_vm_starting_vmid + index }}"
    state: started
  loop: "{{ vm_scenarios[vm_scenario] | dict2items }}"
  loop_control:
    index_var: index

- name: Get network info from VM
  shell: "qm guest cmd {{ proxmox_vm_starting_vmid + index }} network-get-interfaces"
  retries: 20
  delay: 2
  register: __vm_net
  loop: "{{ vm_scenarios[vm_scenario] | dict2items }}"
  loop_control:
    index_var: index
  until:
  - __vm_net is not failed
  - "'ip-addresses' in (__vm_net.stdout | from_json | selectattr('name', 'equalto', 'eth0') | list)[0]"

- name: deb
  debug:
    var: __vm_net.results

- name: set fact vm_ips
  set_fact:
    vm_ips: "{% for vm in __vm_net.results %}{{ ((vm.stdout | from_json | selectattr('name', 'equalto', 'eth0') | list)[0]['ip-addresses'] | selectattr('ip-address-type', 'equalto', 'ipv4') | list)[0]['ip-address'] }},{% endfor %}"

- name: set fact vm_iplist
  set_fact:
    vm_iplist: "{{ vm_ips.split(',')|reject('match', '^$')|list }}"

- name: add hosts to inventory
  add_host:
    name: "{{ item.key }}"
    groups: "{{ item.value.groups }}"
    ansible_ssh_host: "{{ vm_iplist[index] }}"
    ansible_ssh_user: cloud-user

  loop: "{{ vm_scenarios[vm_scenario] | dict2items }}"
  loop_control:
    index_var: index

- name: groups
  debug:
    var: groups

- name: ansible_play_hosts
  debug:
    var: ansible_play_hosts

#- name: hostvars
#  debug:
#    var: hostvars
