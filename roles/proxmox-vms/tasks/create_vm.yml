---

# Variables:
# - vm_name
# - vm_id
# - vm_network
# - vm_template
# - vm_storage
# - vm_groups
# - vm_disks
# - vm_cpu_count
# - vm_memory_size

- name: Gather list of VMs
  shell: pvesh get /cluster/resources -type vm --output-format yaml
  changed_when: false
  register: __vm_list

- name: Filter VM list for templates
  set_fact:
    vm_list: "{{ __vm_list.stdout | from_yaml }}"
    vm_templates: "{{ (__vm_list.stdout | from_yaml) | selectattr('template', 'equalto', 1) | list }}"

# NOTE: Due to bugs with proxmox_kvm, creating linked clones does not seem to work so we're using pvesh below instead
#- name: "{{ vm_name }}: Create VM"
#  proxmox_kvm:
#    api_user: "{{ proxmox_user }}"
#    api_password: "{{ proxmox_password }}"
#    api_host: "{{ groups['proxmox_host'][0] }}"
#    node: "{{ groups['proxmox_host'][0] }}"
#    name: "{{ vm_name }}"
#    #cores: "{{ cpu_count }}"
#    #memory: "{{ memory_size }}"
#    #net: '{"net0":"virtio,bridge={{ vm_network | default(default_proxmox_network) }}"}'
#    clone: "{{ vm_template }}"
#    full: no
#    #vmid: "{{ (vm_templates | selectattr('name', 'equalto', vm_template) | list).0.vmid }}"
#    newid: "{{ vm_id }}"
#    #storage: "{{ vm_storage | default(default_proxmox_storage) }}"
#    #scsi: "{{ vm_disks }}" # NOTE: this does not seem to work, maybe because it's a clone?
#    #scsihw: virtio-scsi-pci
#    #agent: yes
#    timeout: 500

- name: "{{ vm_name }}: Create VM"
  shell: "pvesh create /nodes/{{ groups['proxmox_host'][0] }}/qemu/{{ (vm_templates | selectattr('name', 'equalto', vm_template) | list).0.vmid }}/clone -newid {{ vm_id }} -name {{ vm_name }}"
  when: "not vm_list | selectattr('id', 'equalto', 'qemu/' + (vm_id|string))"

- name: "{{ vm_name }}: Retrieve VM config"
  shell: pvesh get /nodes/{{ groups['proxmox_host'][0] }}/qemu/{{ vm_id }}/config --output-format yaml
  changed_when: false
  register: __prox_vm_config

- name: set VM config fact
  set_fact:
    __vm_config: "{{ __prox_vm_config.stdout | from_yaml }}"

- name: "{{ vm_name }}: Create additional VM disks"
  shell: "pvesh create /nodes/{{ groups['proxmox_host'][0] }}/qemu/{{ vm_id }}/config -{{ itm.key }} {{ vm_storage }}:{{ itm.value }}"
  when: itm.key not in __vm_config
  loop: "{{ vm_disks | dict2items }}"
  loop_control:
    index_var: idx
    loop_var: itm

- name: "{{ vm_name }}: Start VM"
  proxmox_kvm:
    api_user: "{{ proxmox_user }}"
    api_password: "{{ proxmox_password }}"
    api_host: "{{ groups['proxmox_host'][0] }}"
    node: "{{ groups['proxmox_host'][0] }}"
    vmid: "{{ vm_id }}"
    state: started

- name: "{{ vm_name }}: Get eth0 network info from VM (wait until eth0 is up)"
  shell: "qm guest cmd {{ vm_id }} network-get-interfaces"
  changed_when: false
  retries: 20
  delay: 2
  register: __vm_net
  until:
  - __vm_net is not failed
  - "'ip-addresses' in (__vm_net.stdout | from_json | selectattr('name', 'equalto', 'eth0') | list)[0]"

- name: set fact vm_ips
  set_fact:
    vm_ip: "{{ ((__vm_net.stdout | from_json | selectattr('name', 'equalto', 'eth0') | list)[0]['ip-addresses'] | selectattr('ip-address-type', 'equalto', 'ipv4') | list)[0]['ip-address'] }}"

- name: "{{ vm_name }}: add host to inventory"
  add_host:
    name: "{{ vm_name }}"
    groups: "{{ vm_groups }}"
    ansible_ssh_host: "{{ vm_ip }}"
    ansible_ssh_user: cloud-user
  changed_when: false

- name: groups
  debug:
    var: groups

- name: ansible_play_hosts
  debug:
    var: ansible_play_hosts
