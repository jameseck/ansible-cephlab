---
- name: Ensure qcow storage dir exists
  file:
    path: "{{ proxmox_template_qcow_storage_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Upload cloud images
  copy:
    src: "{{ item.value.src_dir }}/{{ item.value.image }}"
    dest: "{{ proxmox_template_qcow_storage_dir }}/{{ item.value.image }}"
    owner: root
    group: root
    mode: 0644
  loop: "{{ proxmox_templates | dict2items }}"

- name: Create template VMs
  proxmox_kvm:
    name: "{{ item.key }}"
    cores: "{{ item.value.cpu_count | default(default_vm_cpu_count) }}"
    memory: "{{ item.value.memory_mb | default(default_vm_memory_mb) }}"
    hotplug: network,disk,cpu,memory,usb
    onboot: "{{ item.value.onboot | default(default_vm_onboot) }}"
    vmid: "{{ item.value.vmid | default(omit) }}"
    net: '{"net0":"virtio,bridge={{ proxmox_network }}"}'
    agent: yes
  loop: "{{ proxmox_templates | dict2items }}"

- name: Wait for template VMs creation
  proxmox_kvm:
    name: "{{ item.key }}"
    state: current
  loop: "{{ proxmox_templates | dict2items }}"
  retries: 10
  delay: 2
  register: __proxmox_template_create_check
  until:
  - __proxmox_template_create_check is not failed
  - __proxmox_template_create_check.status == 'stopped' or __proxmox_template_create_check.status == 'running'

- name: Get snippet storage path
  shell: |
    #!/bin/bash
    set -o pipefail
    pvesh get /storage/{{ proxmox_storage_snippets }} --output-format json | jq -r '.path'
  args:
    executable: /bin/bash
  changed_when: false
  register: __proxmox_snippet_path

- name: set snippet storage path fact
  set_fact:
    proxmox_snippet_path: "{{ __proxmox_snippet_path.stdout }}"

- name: Create template snippets
  template:
    src: cloud-init.cfg.j2
    dest: "{{ proxmox_snippet_path }}/snippets/{{ item.key }}-cloud-init.cfg"
    owner: root
    group: root
    mode: 0644
  loop: "{{ proxmox_templates | dict2items }}"

- name: Get VM config
  prox_get_vm_configs:
  register: __vm_configs

- name: Import qcow image to template
  shell: |
    #!/bin/bash
    set -e
    qm importdisk {{ __vm_configs.vm[item.key].vmid }} {{ proxmox_template_qcow_storage_dir }}/{{ item.value.image }} {{ proxmox_storage }}
    qm set {{ __vm_configs.vm[item.key].vmid }} --scsihw virtio-scsi-pci --scsi0 {{ proxmox_storage }}:vm-{{ __vm_configs.vm[item.key].vmid }}-disk-0
  when: __vm_configs.vm[item.key].scsi0 is not defined
  loop: "{{ proxmox_templates | dict2items }}"

- name: Configure template
  shell: |
    #!/bin/bash
    set -e
    qm set {{ __vm_configs.vm[item.key].vmid }} --ide2 {{ proxmox_storage }}:cloudinit
    qm set {{ __vm_configs.vm[item.key].vmid }} --cicustom user={{ proxmox_storage_snippets }}:snippets/{{ item.key }}-cloud-init.cfg
    qm set {{ __vm_configs.vm[item.key].vmid }} --boot c --bootdisk scsi0
    qm set {{ __vm_configs.vm[item.key].vmid }} --numa 1
  when: __vm_configs.vm[item.key].ide2 is not defined
  loop: "{{ proxmox_templates | dict2items }}"

#- debug:
#    msg: "{{ __vm_configs.vm | dict2items | selectattr('value.template', 'defined') | list }}"

- name: Prepare templates
  include_tasks: prep.yml

- name: Convert to templates
  shell: qm template {{ __vm_configs.vm[item.key].vmid }}
  when: __vm_configs.vm[item.key].template is not defined or __vm_configs.vm[item.key].template == 0
  loop: "{{ proxmox_templates | dict2items }}"
